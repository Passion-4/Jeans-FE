import React, { useEffect, useState } from 'react';
import { 
  StyleSheet, 
  Text, 
  View, 
  TouchableOpacity, 
  Image, 
  FlatList, 
  Alert, 
  ActivityIndicator 
} from 'react-native';
import { useRouter } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import TopNavBar from '../../components/TopNavBar';
import BottomNavBar from '../../components/BottomNavBar';

type Friend = {
  memberId: number;
  name: string;
  profileUrl: string;
  nickname?: string;
};

export default function FriendDeleteScreen() {
  const [friends, setFriends] = useState<Friend[]>([]);
  const [selectedFriends, setSelectedFriends] = useState<number[]>([]);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  // üîπ API Ìò∏Ï∂úÌïòÏó¨ ÏπúÍµ¨ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    const fetchFriends = async () => {
      setLoading(true);
      try {
        console.log("üöÄ API ÏöîÏ≤≠ ÏãúÏûë: /follow-list");

        // ‚úÖ accessToken Í∞ÄÏ†∏Ïò§Í∏∞
        const token = await AsyncStorage.getItem("accessToken");
        if (!token) {
          console.log("‚ùå Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ ÏóÜÏùå ‚Üí Î°úÍ∑∏Ïù∏ ÌïÑÏöî");
          Alert.alert("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
          return;
        }

        const response = await fetch("https://api.passion4-jeans.store/follow-list", {
          method: "GET",
          headers: {
            "Authorization": `Bearer ${token}`,
          },
        });

        console.log("üîπ API ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìú:", response.status);
        let responseText = await response.text();
        console.log("üîπ API ÏùëÎãµ Î≥∏Î¨∏:", responseText);

        if (response.status === 403) {
          Alert.alert("Ïò§Î•ò", "Î°úÍ∑∏Ïù∏ ÏÑ∏ÏÖòÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.");
          await AsyncStorage.removeItem("accessToken");
          return;
        }

        if (!response.ok) {
          throw new Error(`ÏπúÍµ¨ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Îç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§. (${response.status})`);
        }

        const data = JSON.parse(responseText);
        console.log("‚úÖ ÏπúÍµ¨ Î™©Î°ù Îç∞Ïù¥ÌÑ∞:", data);

        setFriends(data || []);
      } catch (error) {
        console.error("‚ùå API ÏöîÏ≤≠ Ïã§Ìå®:", error);
        Alert.alert("Ïò§Î•ò", error instanceof Error ? error.message : "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò Î∞úÏÉù");
      } finally {
        setLoading(false);
      }
    };

    fetchFriends();
  }, []);

  // üîπ ÏπúÍµ¨ ÏÑ†ÌÉù/Ìï¥Ï†ú Ìï®Ïàò
  const toggleFriendSelection = (friendId: number) => {
    setSelectedFriends((prev) =>
      prev.includes(friendId) ? prev.filter(id => id !== friendId) : [...prev, friendId]
    );
  };

  // üîπ ÏπúÍµ¨ ÏÇ≠Ï†ú ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏
  const confirmDelete = () => {
    Alert.alert(
      "ÏπúÍµ¨ ÏÇ≠Ï†ú",
      "Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?",
      [
        { text: "Ï∑®ÏÜå", style: "cancel" },
        { text: "ÏÇ≠Ï†ú", style: "destructive", onPress: deleteSelectedFriends }
      ]
    );
  };

  // üîπ ÏπúÍµ¨ ÏÇ≠Ï†ú API Ìò∏Ï∂ú
  const deleteSelectedFriends = async () => {
    try {
      console.log(`üöÄ ÏπúÍµ¨ ÏÇ≠Ï†ú ÏöîÏ≤≠: ${selectedFriends}`);

      const token = await AsyncStorage.getItem("accessToken");
      if (!token) {
        console.log("‚ùå Ïï°ÏÑ∏Ïä§ ÌÜ†ÌÅ∞ ÏóÜÏùå ‚Üí Î°úÍ∑∏Ïù∏ ÌïÑÏöî");
        Alert.alert("Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
        return;
      }

      for (const friendId of selectedFriends) {
        const response = await fetch(`https://api.passion4-jeans.store/follow-list/${friendId}`, {
          method: "DELETE",
          headers: {
            "Authorization": `Bearer ${token}`,
          },
        });

        console.log(`üîπ ÏÇ≠Ï†ú API ÏùëÎãµ ÏÉÅÌÉú ÏΩîÎìú (${friendId}):`, response.status);

        if (!response.ok) {
          throw new Error(`ÏπúÍµ¨ ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. (${response.status})`);
        }
      }

      Alert.alert("ÏÑ±Í≥µ", "ÏÑ†ÌÉùÌïú ÏπúÍµ¨Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.");
      
      // ÏÇ≠Ï†úÎêú ÏπúÍµ¨ Î™©Î°ùÏóêÏÑú Ï†úÍ±∞
      setFriends((prev) => prev.filter((friend) => !selectedFriends.includes(friend.memberId)));
      setSelectedFriends([]);
    } catch (error) {
      console.error("‚ùå ÏπúÍµ¨ ÏÇ≠Ï†ú Ïã§Ìå®:", error);
      Alert.alert("Ïò§Î•ò", error instanceof Error ? error.message : "Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò Î∞úÏÉù");
    }
  };

  return (
    <View style={styles.container}>
      <TopNavBar />

      <View style={styles.titleContainer}>
        <Text style={styles.title}>ÏπúÍµ¨ ÏÇ≠Ï†ú</Text>
      </View>

      {/* üîπ Î°úÎî© Ï§ë ÌëúÏãú */}
      {loading ? (
        <ActivityIndicator size="large" color="#008DBF" />
      ) : (
        <FlatList
          data={friends}
          numColumns={3}
          keyExtractor={(item) => item.memberId.toString()}
          renderItem={({ item }) => (
            <TouchableOpacity
              style={[styles.friendCard, selectedFriends.includes(item.memberId) && styles.selectedFriend]}
              onPress={() => toggleFriendSelection(item.memberId)}
            >
              <Image source={{ uri: item.profileUrl }} style={styles.friendImage} />
              <Text style={styles.friendName}>{item.nickname}</Text>
            </TouchableOpacity>
          )}
          contentContainerStyle={styles.friendsContainer}
        />
      )}

      <TouchableOpacity
        style={[styles.confirmButton, selectedFriends.length === 0 && styles.disabledButton]}
        onPress={confirmDelete}
        disabled={selectedFriends.length === 0}
      >
        <Text style={styles.confirmText}>ÏÇ≠Ï†ú</Text>
      </TouchableOpacity>

      <BottomNavBar />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    paddingHorizontal: 15,
  },
  titleContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    marginVertical: 20,
    marginTop: 150,
  },
  title: {
    fontSize: 35,
    fontFamily: 'Bold',
    textAlign: 'center',
  },
  friendsContainer: {
    justifyContent: 'center',
    paddingVertical: 20,
  },
  friendCard: {
    width: 100,
    height: 130,
    justifyContent: 'center',
    alignItems: 'center',
    margin: 5,
    borderRadius: 12,
    backgroundColor: '#FFFFFF',
    elevation: 4,
    borderWidth: 2,
    borderColor: 'white'
  },
  selectedFriend: {
    borderColor: '#FF616D',
    borderWidth: 5,
  },
  friendImage: {
    width: 85,
    height: 85,
    borderRadius: 42.5,
    marginBottom: 8,
  },
  friendName: {
    fontSize: 18,
    fontFamily: 'Medium',
    textAlign: 'center',
  },
  confirmButton: {
    width: '100%',
    height: 55,
    backgroundColor: '#008DBF',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 10,
    marginBottom: 120,
  },
  disabledButton: {
    backgroundColor: '#B0BEC5',
  },
  confirmText: {
    fontSize: 20,
    fontFamily: 'Medium',
    color: '#FFFFFF',
  },
});
